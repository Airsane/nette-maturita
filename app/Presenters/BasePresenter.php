<?php


namespace App\Presenters;

use App\Model\HouseManager;
use App\Model\MyAuthenticator;
use App\Model\ReservationManager;
use App\Model\UserManager;
use Nette;
use Nette\Application\UI\Form;
use Nette\Mail\Message;
use Nette\Mail\SendmailMailer;
use Tomaj\Form\Renderer\BootstrapVerticalRenderer;

abstract class BasePresenter extends Nette\Application\UI\Presenter
{

    public $database;
    public $autentificator;
    public $houseManager;
    public $userManager;
    public $reservationManager;
    public $signaled = false;

    public function __construct(Nette\Database\Context $database)
    {
        $this->database = $database;
        $this->autentificator = new MyAuthenticator($database);
        $this->houseManager = new HouseManager($database);
        $this->userManager = new UserManager($database);
        $this->reservationManager = new ReservationManager($database);
    }

    public function searchFormSucceeded($form, $values)
    {
        $this->redirect('House:Search', 1, $values->search);
    }

    public function loginFormSucceeded(Form $form, \stdClass $values)
    {
        if ($this->user->isLoggedIn()) {
            $this->flashMessage("Chyba nepatříš sem!", 'danger');
            $this->redirect('Homepage:');
            exit;
        }
        try {
            $this->getUser()->setAuthenticator($this->autentificator);
            $tt = $this->database->table('user')->where('email = ? ', $values->email)->fetch();
            if ($tt) {
                if ($tt->active == 0) {
                    $mail = new Message;
                    $mail->setFrom('Kratos <info@kabelepa.spse-net.cz>')
                        ->addTo($values->email)
                        ->setSubject('Ověření emailu')
                        ->setBody("Dobrý den,\nprosím ověřte svůj email tímto odkazem https://kabelepa.mp.spse-net.cz/www/sign/confirm?user=" . $tt->id . "&code=" . $tt->code . "");
                    $mailer = new SendmailMailer;
                    $mailer->send($mail);
                    $this->flashMessage('Email nebyl ověřen!', 'danger');
                    $this->redirect('this');

                }
            }
            $this->getUser()->login($values->email, $values->password);
            $this->flashMessage('Přihlášení bylo úspešné!', 'success');
            $this->redirect('this');
        } catch (Nette\Security\AuthenticationException $e) {
            $this->flashMessage('Neplatné jméno nebo heslo!', 'danger');

        }
    }

    protected function beforeRender()
    {
        $this->template->addFilter('stripTags', function ($obsah) {
            return strip_tags($obsah);
        });
    }

    protected function createComponentSearchForm()
    {
        $form = new Nette\Application\UI\Form;
        $form->setRenderer(new BootstrapVerticalRenderer);
        $form->addText('search', 'Hledat');
        $form->addSubmit('send', 'Hledat');
        $form->onSuccess[] = [$this, 'searchFormSucceeded'];
        return $form;
    }

    protected function startup()
    {
        parent::startup(); // TODO: Change the autogenerated stub
        if ($this->getSignal() !== false)
            $this->signaled = true;
    }

    protected function afterRender()
    {
        parent::afterRender(); // TODO: Change the autogenerated stub
        if ($this->isAjax()) {
            $this->redrawControl('content');
        }
    }

    protected function createComponentLoginForm()
    {
        $form = new Nette\Application\UI\Form;
        $form->setRenderer(new BootstrapVerticalRenderer);
        $form->addEmail('email', 'Email:')->setRequired('Prosím vyplňte email');
        $form->addPassword('password', 'Heslo:')->setRequired('Prosím zadejte heslo');
        $form->addSubmit('send', 'Přihlásit se');
        $form->onSuccess[] = [$this, 'loginFormSucceeded'];
        return $form;
    }
}